/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.Usuario;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-03T22:31:34.730Z")

@Api(value = "usuario", description = "the usuario API")
@RequestMapping(value = "/cadastro")
public interface UsuarioApi {

    @ApiOperation(value = "Cadastra usuário no sistema.", nickname = "createUser", notes = "Este endPoint realiza cadastros de usuário no sistema.", response = Usuario.class, tags={ "Interfaces do CRUD de Usuários", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Cadastro realizado com sucesso.", response = Usuario.class),
        @ApiResponse(code = 500, message = "Erro interno.") })
    @RequestMapping(value = "/usuario/cadastrarUsuario",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Usuario> createUser(@ApiParam(value = "Cadastro de Usuário" ,required=true )  @Valid @RequestBody Usuario body);


    @ApiOperation(value = "Esta Interface apaga um usuário previamente cadastrado.", nickname = "deleteUser", notes = "", tags={ "Interfaces do CRUD de Usuários", })
    @ApiResponses(value = { 
        @ApiResponse(code = 404, message = "Usuário não encontrado."),
        @ApiResponse(code = 500, message = "Erro interno.") })
    @RequestMapping(value = "/usuario/deletarUsuario/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "Id do usuário que será deletado.",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Lista todos usuários.", nickname = "getAllUsers", notes = "", response = Usuario.class, tags={ "Interfaces do CRUD de Usuários", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Usuários retornado com sucesso.", response = Usuario.class),
        @ApiResponse(code = 404, message = "Nenhum usuário encontrado."),
        @ApiResponse(code = 500, message = "Erro interno") })
    @RequestMapping(value = "/usuario/listaTodosUsuarios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Usuario>> getAllUsers();


    @ApiOperation(value = "Obtém usuário por parte do nome.", nickname = "getUserByPartName", notes = "", response = Usuario.class, tags={ "Interfaces do CRUD de Usuários", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Usuários retornado com sucesso.", response = Usuario.class),
        @ApiResponse(code = 404, message = "Nenhum usuário encontrado."),
        @ApiResponse(code = 500, message = "Erro interno") })
    @RequestMapping(value = "/usuario/listarUsuarioPorParteDoNome/{parteDoNome}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Usuario>> getUserByPartName(@ApiParam(value = "Parametro, consiste em parte do nome para filtro de usuários no sistema.",required=true) @PathVariable("parteDoNome") String parteDoNome);


    @ApiOperation(value = "Atualiza um usuário previamente cadastrado.", nickname = "updateUser", notes = "Este endPoint é responsável pela atualização de um usuário cadastrado.", response = Usuario.class, tags={ "Interfaces do CRUD de Usuários", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Usuário atualizado com sucesso.", response = Usuario.class),
        @ApiResponse(code = 404, message = "Usuário não encontrado."),
        @ApiResponse(code = 500, message = "Erro interno.") })
    @RequestMapping(value = "/usuario/atualizarUsuario",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Usuario> updateUser(@ApiParam(value = "Usuáario à ser atualizado" ,required=true )  @Valid @RequestBody Usuario body);

}
